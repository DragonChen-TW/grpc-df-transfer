# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import df_pb2 as df__pb2


class DataFrameServiceStub(object):
    """python3 -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. df.proto

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDFbyJSON = channel.unary_stream(
                '/DataFrameService/GetDFbyJSON',
                request_serializer=df__pb2.Empty.SerializeToString,
                response_deserializer=df__pb2.DFRow.FromString,
                )
        self.GetDFbyuJSON = channel.unary_stream(
                '/DataFrameService/GetDFbyuJSON',
                request_serializer=df__pb2.Empty.SerializeToString,
                response_deserializer=df__pb2.DFRow.FromString,
                )
        self.GetDFbyorJSON = channel.unary_stream(
                '/DataFrameService/GetDFbyorJSON',
                request_serializer=df__pb2.Empty.SerializeToString,
                response_deserializer=df__pb2.DFRow.FromString,
                )
        self.GetDFbyCSV = channel.unary_stream(
                '/DataFrameService/GetDFbyCSV',
                request_serializer=df__pb2.Empty.SerializeToString,
                response_deserializer=df__pb2.DFRow.FromString,
                )
        self.GetDFbydtCSV = channel.unary_stream(
                '/DataFrameService/GetDFbydtCSV',
                request_serializer=df__pb2.Empty.SerializeToString,
                response_deserializer=df__pb2.DFRow.FromString,
                )
        self.GetDFbyJAY = channel.unary_stream(
                '/DataFrameService/GetDFbyJAY',
                request_serializer=df__pb2.Empty.SerializeToString,
                response_deserializer=df__pb2.ByteRow.FromString,
                )
        self.GetChunkedJSON = channel.unary_stream(
                '/DataFrameService/GetChunkedJSON',
                request_serializer=df__pb2.Empty.SerializeToString,
                response_deserializer=df__pb2.DFRow.FromString,
                )
        self.GetChunkeduJSON = channel.unary_stream(
                '/DataFrameService/GetChunkeduJSON',
                request_serializer=df__pb2.Empty.SerializeToString,
                response_deserializer=df__pb2.DFRow.FromString,
                )
        self.GetChunkedorJSON = channel.unary_stream(
                '/DataFrameService/GetChunkedorJSON',
                request_serializer=df__pb2.Empty.SerializeToString,
                response_deserializer=df__pb2.DFRow.FromString,
                )
        self.GetChunkedCSV = channel.unary_stream(
                '/DataFrameService/GetChunkedCSV',
                request_serializer=df__pb2.Empty.SerializeToString,
                response_deserializer=df__pb2.DFRow.FromString,
                )
        self.GetChunkeddtCSV = channel.unary_stream(
                '/DataFrameService/GetChunkeddtCSV',
                request_serializer=df__pb2.Empty.SerializeToString,
                response_deserializer=df__pb2.DFRow.FromString,
                )
        self.GetChunkedFeather = channel.unary_stream(
                '/DataFrameService/GetChunkedFeather',
                request_serializer=df__pb2.Empty.SerializeToString,
                response_deserializer=df__pb2.DFRow.FromString,
                )


class DataFrameServiceServicer(object):
    """python3 -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. df.proto

    """

    def GetDFbyJSON(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDFbyuJSON(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDFbyorJSON(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDFbyCSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDFbydtCSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDFbyJAY(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChunkedJSON(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChunkeduJSON(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChunkedorJSON(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChunkedCSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChunkeddtCSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChunkedFeather(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataFrameServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDFbyJSON': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDFbyJSON,
                    request_deserializer=df__pb2.Empty.FromString,
                    response_serializer=df__pb2.DFRow.SerializeToString,
            ),
            'GetDFbyuJSON': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDFbyuJSON,
                    request_deserializer=df__pb2.Empty.FromString,
                    response_serializer=df__pb2.DFRow.SerializeToString,
            ),
            'GetDFbyorJSON': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDFbyorJSON,
                    request_deserializer=df__pb2.Empty.FromString,
                    response_serializer=df__pb2.DFRow.SerializeToString,
            ),
            'GetDFbyCSV': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDFbyCSV,
                    request_deserializer=df__pb2.Empty.FromString,
                    response_serializer=df__pb2.DFRow.SerializeToString,
            ),
            'GetDFbydtCSV': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDFbydtCSV,
                    request_deserializer=df__pb2.Empty.FromString,
                    response_serializer=df__pb2.DFRow.SerializeToString,
            ),
            'GetDFbyJAY': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDFbyJAY,
                    request_deserializer=df__pb2.Empty.FromString,
                    response_serializer=df__pb2.ByteRow.SerializeToString,
            ),
            'GetChunkedJSON': grpc.unary_stream_rpc_method_handler(
                    servicer.GetChunkedJSON,
                    request_deserializer=df__pb2.Empty.FromString,
                    response_serializer=df__pb2.DFRow.SerializeToString,
            ),
            'GetChunkeduJSON': grpc.unary_stream_rpc_method_handler(
                    servicer.GetChunkeduJSON,
                    request_deserializer=df__pb2.Empty.FromString,
                    response_serializer=df__pb2.DFRow.SerializeToString,
            ),
            'GetChunkedorJSON': grpc.unary_stream_rpc_method_handler(
                    servicer.GetChunkedorJSON,
                    request_deserializer=df__pb2.Empty.FromString,
                    response_serializer=df__pb2.DFRow.SerializeToString,
            ),
            'GetChunkedCSV': grpc.unary_stream_rpc_method_handler(
                    servicer.GetChunkedCSV,
                    request_deserializer=df__pb2.Empty.FromString,
                    response_serializer=df__pb2.DFRow.SerializeToString,
            ),
            'GetChunkeddtCSV': grpc.unary_stream_rpc_method_handler(
                    servicer.GetChunkeddtCSV,
                    request_deserializer=df__pb2.Empty.FromString,
                    response_serializer=df__pb2.DFRow.SerializeToString,
            ),
            'GetChunkedFeather': grpc.unary_stream_rpc_method_handler(
                    servicer.GetChunkedFeather,
                    request_deserializer=df__pb2.Empty.FromString,
                    response_serializer=df__pb2.DFRow.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DataFrameService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataFrameService(object):
    """python3 -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. df.proto

    """

    @staticmethod
    def GetDFbyJSON(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DataFrameService/GetDFbyJSON',
            df__pb2.Empty.SerializeToString,
            df__pb2.DFRow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDFbyuJSON(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DataFrameService/GetDFbyuJSON',
            df__pb2.Empty.SerializeToString,
            df__pb2.DFRow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDFbyorJSON(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DataFrameService/GetDFbyorJSON',
            df__pb2.Empty.SerializeToString,
            df__pb2.DFRow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDFbyCSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DataFrameService/GetDFbyCSV',
            df__pb2.Empty.SerializeToString,
            df__pb2.DFRow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDFbydtCSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DataFrameService/GetDFbydtCSV',
            df__pb2.Empty.SerializeToString,
            df__pb2.DFRow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDFbyJAY(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DataFrameService/GetDFbyJAY',
            df__pb2.Empty.SerializeToString,
            df__pb2.ByteRow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChunkedJSON(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DataFrameService/GetChunkedJSON',
            df__pb2.Empty.SerializeToString,
            df__pb2.DFRow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChunkeduJSON(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DataFrameService/GetChunkeduJSON',
            df__pb2.Empty.SerializeToString,
            df__pb2.DFRow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChunkedorJSON(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DataFrameService/GetChunkedorJSON',
            df__pb2.Empty.SerializeToString,
            df__pb2.DFRow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChunkedCSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DataFrameService/GetChunkedCSV',
            df__pb2.Empty.SerializeToString,
            df__pb2.DFRow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChunkeddtCSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DataFrameService/GetChunkeddtCSV',
            df__pb2.Empty.SerializeToString,
            df__pb2.DFRow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChunkedFeather(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DataFrameService/GetChunkedFeather',
            df__pb2.Empty.SerializeToString,
            df__pb2.DFRow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
